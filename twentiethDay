import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int n = scan.nextInt(), m = scan.nextInt();
        BitSet b1 = new BitSet(n); BitSet b2 = new BitSet(n);
        BitSet[] bits = new BitSet[3];
        bits[1] = b1; bits[2] = b2;
        for(int i=0; i<m; i++){
            String op = scan.next();
            int x = scan.nextInt(), y = scan.nextInt();
            switch(op){
                case "AND":
                    bits[x].and(bits[y]);
                    break;
                case "OR":
                    bits[x].or(bits[y]);
                    break;
                case "XOR":
                    bits[x].xor(bits[y]);
                    break;
                case "FLIP":
                    bits[x].flip(y);
                    break;
                case "SET":
                    bits[x].set(y);
                    break;
            }
            
            System.out.println(bits[1].cardinality()+" "+ bits[2].cardinality());
        }
        scan.close();
    }
}

import java.io.*;
import java.lang.reflect.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

class Add{
    void add(int ... values){
        int sum = 0;
        for(int i=0; i<values.length-1; i++){
            sum += values[i];
            System.out.printf(values[i]+"+" );
        }
        sum += values[values.length - 1];
        System.out.printf(values[values.length - 1] +"="+ sum);
        System.out.println();
    }
    
}


public class Solution {

    public static void main(String[] args) {
       try{
			BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
			int n1=Integer.parseInt(br.readLine());
			int n2=Integer.parseInt(br.readLine());
			int n3=Integer.parseInt(br.readLine());
			int n4=Integer.parseInt(br.readLine());
			int n5=Integer.parseInt(br.readLine());
			int n6=Integer.parseInt(br.readLine());
			Add ob=new Add();
			ob.add(n1,n2);
			ob.add(n1,n2,n3);
			ob.add(n1,n2,n3,n4,n5);	
			ob.add(n1,n2,n3,n4,n5,n6);
			Method[] methods=Add.class.getDeclaredMethods();
			Set<String> set=new HashSet<>();
			boolean overload=false;
			for(int i=0;i<methods.length;i++)
			{
				if(set.contains(methods[i].getName()))
				{
					overload=true;
					break;
				}
				set.add(methods[i].getName());
				
			}
			if(overload)
			{
				throw new Exception("Overloading not allowed");
			}
			}
			catch(Exception e)
			{
				e.printStackTrace();
			}
		}
		
	
	

}


